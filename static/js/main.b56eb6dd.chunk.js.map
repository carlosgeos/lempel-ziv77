{"version":3,"sources":["LZtableRow.js","LZtable.js","LZinput.js","LZlegend.js","App.js","registerServiceWorker.js","index.js","logo.svg"],"names":["withStyles","window","backgroundColor","borderRadius","buffer","props","next_char","row_info","className","index","head","classes","tail","offset","distance","styles","lztable","marginTop","fontSize","border","padding","boxShadow","lztableheading","background","lztableheadingcell","lztablecell","fontFamily","table_rows","dict_info","map","key","table_headings","cell","LZinput","input_style","container","spacing","item","xs","md","inputProps","style","InputLabelProps","shrink","type","name","label","value","window_size","onChange","handleChange","fullWidth","buffer_size","legend","window_legend","display","width","height","buffer_legend","variant","align","App","state","input_str","dict","bind","search_window","j","length","to_match","substring","includes","lastIndexOf","rest_of_buffer","k","charAt","this","w","parseInt","b","i","prefix_info","prefix_exists","setState","prevstate","event","target","lz","maxWidth","src","logo","alt","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.b56eb6dd.chunk.js","sourcesContent":["import React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n    window: {\n        backgroundColor: '#FE6B8B',\n        borderRadius: '6px',\n    },\n    buffer: {\n        backgroundColor: '#FF8E53',\n        borderRadius: '6px',\n    }\n};\n\nfunction LZtableRow(props) {\n    const next_char = props.row_info.next_char ? props.row_info.next_char : \"‚ä•\";\n    return (\n        <TableRow>\n          <TableCell className={props.className}>{props.index}</TableCell>\n          <TableCell className={props.className}>\n            <span>{props.row_info.head}</span>\n            <span className={props.classes.window}>{props.row_info.window}</span>\n            <span className={props.classes.buffer}>{props.row_info.buffer}</span>\n            <span>{props.row_info.tail}</span>\n          </TableCell>\n          <TableCell className={props.className}>&lt;{props.row_info.offset}, {props.row_info.distance}, {next_char}&gt;</TableCell>\n        </TableRow>\n    );\n}\n\nexport default withStyles(styles)(LZtableRow);\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport LZtableRow from './LZtableRow';\n\nconst styles = {\n    lztable: {\n        marginTop: '20px',\n        fontSize: '1.5rem !important',\n        border: 0,\n        padding: '0 30px',\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    },\n    lztableheading: {\n        background: 'rgb(254,107,139)',\n        background: '-moz-linear-gradient(90deg, rgba(254,107,139,1) 0%, rgba(255,142,83,1) 100%)',\n        background: '-webkit-linear-gradient(90deg, rgba(254,107,139,1) 0%, rgba(255,142,83,1) 100%)',\n        background: 'linear-gradient(90deg, rgba(254,107,139,1) 0%, rgba(255,142,83,1) 100%)',\n        backgroundAttachment: 'fixed', // safari fix\n        border: 0,\n    },\n    lztableheadingcell: {\n        fontSize: '1.7rem',\n    },\n    lztablecell: {\n        fontSize: '1.3rem',\n        fontFamily: 'Roboto Mono, Lucida Console, DejaVu Sans Mono, Monaco, monospace'\n    },\n};\n\nfunction LZtable(props) {\n    const dict_info = props.dict_info;\n    const table_rows = dict_info.map(\n        (row_info, index) =>\n            <LZtableRow className={props.classes.lztablecell} key={index} index={index} row_info={row_info} />\n    );\n    const table_headings = [\"Step\", \"Window & Buffer\", \"<Offset, Length, Next Char>\"].map(\n        (cell, index) =>\n            <TableCell className={props.classes.lztableheadingcell} key={index}>{cell}</TableCell>\n    );\n    return (\n        <Table className={props.classes.lztable}>\n          <TableHead className={props.classes.lztableheading}>\n            <TableRow>\n              {table_headings}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {table_rows}\n          </TableBody>\n        </Table>\n    );\n}\n\n\nexport default withStyles(styles)(LZtable);\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\n\nfunction LZinput(props) {\n    const input_style = {\n        fontSize: '2.5rem',\n    };\n\n    const label_style = {\n        fontSize: '1.6rem',\n    };\n\n    return (\n        <Grid container spacing={24}>\n          <Grid item xs={6} md={2}>\n            <TextField inputProps={{style: input_style}} InputLabelProps={{shrink: true,}} type=\"text\" name=\"window_size\" label=\"Window size\" value={props.window_size} onChange={props.handleChange} fullWidth />\n          </Grid>\n          <Grid item xs={6} md={2}>\n            <TextField inputProps={{style: input_style}} InputLabelProps={{shrink: true,}} type=\"text\" name=\"buffer_size\" label=\"Buffer size\" value={props.buffer_size} onChange={props.handleChange} fullWidth />\n          </Grid>\n          <Grid item xs={12} md={8}>\n            <TextField inputProps={{style: input_style}} InputLabelProps={{style: label_style}} type=\"text\" name=\"input_str\" label=\"Input string\" onChange={props.handleChange} fullWidth />\n          </Grid>\n        </Grid>\n    );\n}\n\n\nexport default LZinput;\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n    legend: {\n        marginTop: '40px',\n    },\n    window_legend: {\n        display: 'inline-block',\n        width: '1rem',\n        height: '1rem',\n        borderRadius: '6px',\n        backgroundColor: '#FE6B8B',\n    },                          // total DRY\n    buffer_legend: {\n        display: 'inline-block',\n        width: '1rem',\n        height: '1rem',\n        borderRadius: '6px',\n        backgroundColor: '#FF8E53',\n    }\n};\n\nfunction LZlegend(props) {\n  return (\n      <div className={props.classes.legend}>\n        <Typography variant='subheading' align='left'>Window = <span className={props.classes.window_legend}></span></Typography>\n        <Typography variant='subheading' align='left'>Buffer = <span className={props.classes.buffer_legend}></span></Typography>\n      </div>\n  );\n}\n\nexport default withStyles(styles)(LZlegend);\n","import React, { Component } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport LZtable from './LZtable';\nimport LZinput from './LZinput';\nimport LZlegend from './LZlegend';\nimport logo from './logo.svg';\nimport 'typeface-roboto';\nimport './App.css';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {input_str: '',\n                      window_size: 6,\n                      buffer_size: 4,\n                      dict: []};\n\n        // This binding is necessary to make `this` work in the callback\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    prefix_exists(search_window, buffer) {\n        // helper method to determine if a prefix exists in the search\n        // window\n        for (var j = 0; j < buffer.length; j++) {\n            let to_match = buffer.substring(0, buffer.length - j);\n            if (search_window.includes(to_match)) {\n                let offset = search_window.length - search_window.lastIndexOf(to_match);\n                let distance = to_match.length;\n                if (offset === distance) { // maybe extends into lookahead buffer\n                    let rest_of_buffer = buffer.substring(buffer.length - j, buffer.length);\n                    let k = 0;\n                    while((rest_of_buffer.charAt(k) === to_match.charAt(k)) &&\n                          k < rest_of_buffer.length) {\n                        distance++;\n                        k++;\n                    }\n                }\n                return [offset, distance];\n            }\n        }\n        return false;\n    }\n\n    lz() {\n        // lz77 algorithm\n        const input_str = this.state.input_str;\n        const w = parseInt(this.state.window_size, 10);\n        const b = parseInt(this.state.buffer_size, 10);\n\n        let i = 0;\n        while (i < input_str.length) {\n            const head = input_str.substring(0, i - w);\n            const search_window = input_str.substring(i - w, i);\n            const buffer = input_str.substring(i, i + b);\n            const tail = input_str.substring(i + b);\n            let offset = 0;\n            let distance = 0;\n            let next_char = buffer.charAt(0);\n\n            const prefix_info = this.prefix_exists(search_window, buffer);\n\n\n            if (prefix_info) {\n                offset = prefix_info[0];\n                distance = prefix_info[1];\n                next_char = input_str.charAt(i + distance);\n                i = i + distance + 1;\n            } else {\n                i++;\n            }\n            // add the table row info to state\n            this.setState((prevstate) => {\n                // updater function to read up-to-date state\n                return {dict: [...prevstate.dict, {\n                    \"head\": head,\n                    \"window\": search_window,\n                    \"buffer\": buffer,\n                    \"tail\": tail,\n                    \"offset\": offset,\n                    \"distance\": distance,\n                    \"next_char\": next_char\n                }]};\n            });\n        }\n    }\n\n    handleChange(event) {\n        // generalized change handler using 'computer property names'\n        // - ES2015 only\n        this.setState({[event.target.name]: event.target.value,\n                       dict: []}, // clean dict\n                      this.lz); // lz is calledback when setState\n        // finishes, we are sure to get the\n        // correct input fields\n    }\n\n    render() {\n        return (\n            <div style={{maxWidth: 1200, padding: 50}} className=\"App\">\n              <CssBaseline />\n              <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <Typography variant=\"display1\">LZ77 compression algorithm</Typography>\n              </header>\n\n              <LZinput window_size={this.state.window_size} buffer_size={this.state.buffer_size} handleChange={this.handleChange}/>\n              <LZlegend/>\n              <LZtable dict_info={this.state.dict}/>\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}